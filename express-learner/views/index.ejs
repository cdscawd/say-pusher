<!DOCTYPE html>
<html>
  <head>
    <title><%= main %></title>
    <link rel="stylesheet" type="text/css" href="static/stylesheets/reset.css">
		<link rel="stylesheet" type="text/css" href="static/stylesheets/index.css">
		<script>
			window.onload = function() { 
				var neadReload = (typeof JSON.parse(sessionStorage.getItem('log'))) == 'object' ? true : false
				if (neadReload) {
					sessionStorage.setItem('log', Date.parse(new Date()))
					location.reload()
				} else {
					sessionStorage.removeItem('log')
				}
			}
		</script>
  </head>
<body>
<div id="container">
  <iframe id="iframe" src=""></iframe>
  <img class="praise " src="static/images/praise.gif" alt="">
  <img class="like " src="static/images/like.gif" alt="">
  <div class="control" style="display: none;">
    <div class="buttons">
      <button id="gotoFirstSlide">First Slide</button>
      <button id="prev_slide">Prev Slide</button>
      <button id="next_slide">Next Slide</button>		
      <button id="prev_step">Prev Step</button>
      <button id="next_step">Next Step</button>
      <button id="praise">praise</button>
      <button id="like">like</button>
    </div>
    <div id="end_time">课程结束倒计时 20' 00''</div>
    <div class="log">
      <p id="time"></p>
      <p id="slideIndex"></p>
    </div>	
  </div>
	<div id="logger" style="display: none;"></div>
	<div id="Mask">Loading...</div>
</div>
<script src="http://zeptojs.com/zepto.min.js"></script>
<script src="https://js.pusher.com/4.1/pusher.min.js"></script>
<!-- Ispring js -->
<script>
	/**
	* 	sessionRequestId=58d1b23d602a4a0001e66f33
	* 	sessionStartAt=1507073590164
	* 	sessionEndAt=1507679587594
	* 	lessonSlug=1072_2932_34582
	//  http://localhost:8000/learner?sessionRequestId=58d1b23d602a4a0161e17ac6&sessionStartAt=1507073590164&sessionEndAt=1507679587594&lessonSlug=1247_4907_43490
	*/
	// DEV Working Space
	var IP = 'http://192.168.0.100:8769'
	var pusher = {}
	var channel
	var sessionStartAt = window.location.search.match(/sessionStartAt=(\S*)&sessionEndAt/)[1]
	var sessionEndAt = window.location.search.match(/sessionEndAt=(\S*)&lessonSlug/)[1]
	var sessionRequestId = window.location.search.match(/sessionRequestId=(\S*)&sessionStartAt/)[1]
	var lessonSlug = window.location.search.match(/lessonSlug=(\S*)/)[1]
	
	$.get(IP + '/voip-web-api/pusher/key?lessonSlug='+lessonSlug+'&sessionRequestId='+sessionRequestId, function(res){
		var status = res.status
		if (status === 200) {
			pusher = res.data
			var pusherKey = pusher.pusherKey
			var cluster = pusher.cluster
			var channelName = pusher.channelName
			$('#iframe').attr('src', 'static/curriculum/' + pusher.lessonLevel)

			Pusher.logToConsole = true
			var pusher = new Pusher(pusherKey, {
				cluster: cluster,
				encrypted: true,
				authTransport: 'jsonp',
				authEndpoint: IP + '/voip-web-api/pusher/auth'
			})
			channel = pusher.subscribe(channelName)

			channel.bind('client-teacher-click', function (data) {
				var EVENT_TYPE = data
				switch (EVENT_TYPE) {
					case 'NEXT_STEP':
						$('#next_step').trigger("click") 
						break
					case 'PREV_STEP':
						$('#prev_step').trigger("click") 
						break
					case 'NEXT_SLIDE':
						$('#next_slide').trigger("click") 
						break
					case 'PREV_SLIDE':
						$('#prev_slide').trigger("click") 
						break
					case 'FIRST_SLIDE':
						$('#gotoFirstSlide').trigger("click") 
						break
					case 'PRAISE':
						$('#praise').trigger("click") 
						break
					case 'LIKE':
						$('#like').trigger("click") 
						break
					case 'CLOSE_SESSION':
						$('#gotoFirstSlide').trigger("click") 
						localStorage.clear()
						location.replace('/sessionend' + '?sessionRequestId=' + sessionRequestId + '&sessionStartAt=' + sessionStartAt + '&sessionEndAt=' + sessionEndAt + '&lessonSlug=' + lessonSlug)
						break
				}
			})
		} else if (status === 400) {
			$('#iframe').attr('src', '')
			localStorage.clear()
			location.replace('/sessionend' + '?sessionRequestId=' + sessionRequestId + '&sessionStartAt=' + sessionStartAt + '&sessionEndAt=' + sessionEndAt + '&lessonSlug=' + lessonSlug)
		}
	})

	var COUNT_DOWN = 1200000
	var prevSlideBtn = document.getElementById("prev_slide")
	var nextSlideBtn = document.getElementById("next_slide")
	var playPrevStepBtn = document.getElementById("prev_step")
	var playNextStepBtn = document.getElementById("next_step")
	var gotoFirstSlide = document.getElementById("gotoFirstSlide")
	var timeLabel = document.getElementById("time")
	var slideIndexLabel = document.getElementById("slideIndex")
	var slidesCount
	var playbackController
	var isPlayedPresentation
	var ispringPresentationConnector = {}
	// praise 点赞
	$('#praise').on('click', function() {
		$('.praise').addClass('animated bounceIn')
		setTimeout(function() {
			$('.praise').removeClass('bounceIn').addClass('bounceOut')
		},1000)
		setTimeout(function() {
			$('.praise').removeClass('animated bounceOut')
		},1500)
	})
	// 喜欢 like
	$('#like').on('click', function() {
		channel.trigger("client-teacher-click", 'LIKE')
		$('.like').addClass('animated bounceIn')
		setTimeout(function() {
			$('.like').removeClass('bounceIn').addClass('bounceOut')
		},1000)
		setTimeout(function() {
			$('.like').removeClass('animated bounceOut')
		},1500)
	})

	// player init
	function playerInit() { 
		ispringPresentationConnector.register = function(player) {
			$('#Mask').hide()
			logger("Teacher Player Running...")
			var presentation = player.presentation()
			slidesCount = presentation.slides().count()
			playbackController = player.view().playbackController()
			initPlaybackControllerEventsHandlers()
			initButtonsEventsHandlers()
			sessionCountDown()
			player.view().playbackController().slideChangeEvent().addHandler(function(slideIndex) {
				logger("Page : " + slideIndex)
			})
		}
	}
	
	// player event
	// Player-SDK/documentation/js-api/ispring.presenter.player.IPresentationPlaybackController.html#playbackState
	function initPlaybackControllerEventsHandlers() {
		playbackController.slideChangeEvent().addHandler(function(slideIndex) {
			slideIndexLabel.innerHTML = "Slide: " + (slideIndex + 1) + " / " + slidesCount
		})
	
		playbackController.clock().tickEvent().addHandler(function(clock) {
			var timeOffset = clock.timestamp().timeOffset()
			var minutes = Math.floor(timeOffset / 60)
			var seconds = Math.round(timeOffset % 60)
			timeLabel.innerHTML = (minutes < 10) ? "0" + minutes: minutes
			timeLabel.innerHTML += ":"
			timeLabel.innerHTML += (seconds < 10) ? "0" + seconds: seconds
		})
	}
	// control button
	function initButtonsEventsHandlers() {
		prevSlideBtn.onclick = function() {
			playbackController.gotoPreviousSlide()
		}
		nextSlideBtn.onclick = function() {
			playbackController.gotoNextSlide()
		}
		playPrevStepBtn.onclick = function() {
			playbackController.gotoPreviousStep()
		}
		playNextStepBtn.onclick = function() {
			playbackController.gotoNextStep()
		}
		gotoFirstSlide.onclick = function() {
			playbackController.gotoFirstSlide(false)
		}
	}

	// debug logger 
	function logger(text) {
		var logger = document.getElementById("logger")
		logger.innerHTML = logger.innerHTML + text + '<br>'
	}

	// 倒计时 1200000
	function sessionCountDown() {
		var min, sec, LOCAL_COUNT_DOWN
		var timer = setInterval(function() {
			var neadGet = (typeof localStorage.getItem('LOCAL_COUNT_DOWN')) == 'object' ? true : false
			if (neadGet) {
				COUNT_DOWN = COUNT_DOWN - 1000
			} else {
				COUNT_DOWN = parseInt(localStorage.getItem('LOCAL_COUNT_DOWN'), 10)
				COUNT_DOWN = COUNT_DOWN - 1000
			}
			min = parseInt((COUNT_DOWN / 1000 / 60), 10)
			min = (min < 10) ? ('0' + min) : min
			sec = parseInt((COUNT_DOWN - (min * 60 * 1000)) / 1000, 10)
			sec = (sec < 10) ? ('0' + sec) : sec
			document.getElementById("end_time").innerHTML = "课程结束倒计时 " + min + "' " + sec + "''"
			LOCAL_COUNT_DOWN = (min * 60 * 1000) + (sec * 1000)
			window.localStorage.setItem('LOCAL_COUNT_DOWN', LOCAL_COUNT_DOWN)
			if (sec < 0) {
				document.getElementById("end_time").innerHTML = "你的课程已经结束"
				clearInterval(timer)
			}
		}, 1000)
	}

	window.onload = function() {
		playerInit()
	}
</script>
</body>
</html>
